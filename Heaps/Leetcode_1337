class Solution {
    class Row implements Comparable<Row> {
        int count;
        int idx;

        Row(int count, int idx) {
            this.count = count;
            this.idx = idx;
        }

        @Override
        public int compareTo(Row r2) {
            if(this.count == r2.count) {
                return this.idx - r2.idx;
            } else {
                return this.count - r2.count;
            }
        }
    }

    public int[] kWeakestRows(int[][] mat, int k) {
        int n = mat.length;
        PriorityQueue<Row> pq = new PriorityQueue<>();

        for(int i=0;i<n;i++) {
            int count = 0;
            for(int j=0;j<mat[0].length;j++) {
                if(mat[i][j] == 1) {
                    count += 1;
                }
            }
            pq.add(new Row(count, i));
        }

        int[] ans = new int[k];
        for(int i=0;i<k;i++) {
            ans[i] = pq.remove().idx;
        }
        return ans;
    }
}